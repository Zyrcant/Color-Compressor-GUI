
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author Tiffany Do
 */

public class ColorCompressorGUI extends javax.swing.JFrame {

    //Stores the original image
    private BufferedImage originalImage = null;
    private BufferedImage postImage;
    private static ArrayList<JPanel> list = new ArrayList<>();

    /**
     * Creates new form ColorCompressorGUI
     */
    public ColorCompressorGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        imageLabel = new javax.swing.JLabel();
        outputImageLabel = new javax.swing.JLabel();
        kValue = new javax.swing.JTextField();
        confirmButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        errorLabel = new javax.swing.JLabel();
        paletteBackground = new javax.swing.JPanel();
        paletteText = new javax.swing.JLabel();
        palette1 = new javax.swing.JPanel();
        list.add(palette1);
        palette2 = new javax.swing.JPanel();
        list.add(palette2);
        palette3 = new javax.swing.JPanel();
        list.add(palette3);
        palette4 = new javax.swing.JPanel();
        list.add(palette4);
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        Open = new javax.swing.JMenuItem();
        saveItem = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();

        fileChooser.setDialogTitle("Choose your image");
        fileChooser.setFileFilter(new ImageFilter());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(102, 102, 102));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        imageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imageLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        outputImageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        outputImageLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        outputImageLabel.setPreferredSize(new java.awt.Dimension(772, 663));

        kValue.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                kValueKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                kValueKeyTyped(evt);
            }
        });

        confirmButton.setText("Go");
        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 204, 204));
        jLabel1.setText("Colors:");

        errorLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        errorLabel.setForeground(new java.awt.Color(255, 102, 102));

        paletteBackground.setBackground(new java.awt.Color(153, 153, 153));

        paletteText.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        paletteText.setText("Palette");

        palette1.setPreferredSize(new java.awt.Dimension(25, 25));

        javax.swing.GroupLayout palette1Layout = new javax.swing.GroupLayout(palette1);
        palette1.setLayout(palette1Layout);
        palette1Layout.setHorizontalGroup(
            palette1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 25, Short.MAX_VALUE)
        );
        palette1Layout.setVerticalGroup(
            palette1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 25, Short.MAX_VALUE)
        );

        palette2.setPreferredSize(new java.awt.Dimension(25, 25));

        javax.swing.GroupLayout palette2Layout = new javax.swing.GroupLayout(palette2);
        palette2.setLayout(palette2Layout);
        palette2Layout.setHorizontalGroup(
            palette2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 25, Short.MAX_VALUE)
        );
        palette2Layout.setVerticalGroup(
            palette2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 25, Short.MAX_VALUE)
        );

        palette3.setPreferredSize(new java.awt.Dimension(25, 25));

        javax.swing.GroupLayout palette3Layout = new javax.swing.GroupLayout(palette3);
        palette3.setLayout(palette3Layout);
        palette3Layout.setHorizontalGroup(
            palette3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 25, Short.MAX_VALUE)
        );
        palette3Layout.setVerticalGroup(
            palette3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 25, Short.MAX_VALUE)
        );

        palette4.setPreferredSize(new java.awt.Dimension(25, 25));

        javax.swing.GroupLayout palette4Layout = new javax.swing.GroupLayout(palette4);
        palette4.setLayout(palette4Layout);
        palette4Layout.setHorizontalGroup(
            palette4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 25, Short.MAX_VALUE)
        );
        palette4Layout.setVerticalGroup(
            palette4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 25, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout paletteBackgroundLayout = new javax.swing.GroupLayout(paletteBackground);
        paletteBackground.setLayout(paletteBackgroundLayout);
        paletteBackgroundLayout.setHorizontalGroup(
            paletteBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paletteBackgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paletteBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(paletteText)
                    .addGroup(paletteBackgroundLayout.createSequentialGroup()
                        .addComponent(palette1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(palette2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(palette3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(palette4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(64, Short.MAX_VALUE))
        );
        paletteBackgroundLayout.setVerticalGroup(
            paletteBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paletteBackgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(paletteText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(paletteBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(palette1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(palette2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(palette3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(palette4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(729, 729, 729)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(kValue, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(confirmButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(errorLabel)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 772, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(outputImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 772, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(paletteBackground, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(errorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(imageLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE)
                    .addComponent(outputImageLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE)
                    .addComponent(paletteBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(confirmButton)
                    .addComponent(jLabel1))
                .addContainerGap(56, Short.MAX_VALUE))
        );

        jMenu1.setText("File");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        Open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        Open.setText("Open");
        Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenActionPerformed(evt);
            }
        });
        jMenu1.add(Open);

        saveItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveItem.setText("Save Image As..");
        saveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveItemActionPerformed(evt);
            }
        });
        jMenu1.add(saveItem);

        Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        jMenu1.add(Exit);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenActionPerformed
        //flush the output image and any error messages
        outputImageLabel.setIcon(null);
        errorLabel.setText("");
        
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
        
            // buffered image preview
            BufferedImage img = null;
            try 
            {
                img = ImageIO.read(file);
                //error checking for images that are too large
                if(img.getHeight() * img.getWidth() > 8000000)
                {
                    errorLabel.setText("ERROR: Image is too large. Please select an image less than 8 megapixels!");
                }
                else
                {
                    
                    //stores the read file into the class variable as well
                    originalImage = img;

                    //scale for the buffered image preview
                    double scale = Math.min(imageLabel.getHeight() * 1.0 / img.getHeight(), imageLabel.getWidth() * 1.0 / img.getWidth());
                    Image dimg = img.getScaledInstance((int)Math.floor(img.getWidth()*scale), (int)Math.floor(img.getHeight()*scale), Image.SCALE_SMOOTH);
                    ImageIcon imageIcon = new ImageIcon(dimg);
                    imageLabel.setIcon(imageIcon);
                }
            } 
            catch (IOException e) 
            {
               System.out.println("Error accessing image."); 
            }
        } else 
            System.out.println("File access cancelled by user.");
    }//GEN-LAST:event_OpenActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed
        //flush any error messages
        errorLabel.setText("");
        int k = Integer.parseInt(kValue.getText());
        boolean confirmation = true;
        if(originalImage == null)
        {
            errorLabel.setText("ERROR: There is no given image!");
        }
        else if(k > 50)
        {
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(this, "That's a lot of colors. You sure you want to do this?", "Warning", dialogButton);
            if(dialogResult == 1)
                confirmation = false;
        }
        if(confirmation)
        {
            BufferedImage kmeansJpg = kmeans_helper(originalImage,k);
            postImage = kmeansJpg;
            double scale = Math.min(imageLabel.getHeight() * 1.0 / kmeansJpg.getHeight(), imageLabel.getWidth() * 1.0 / kmeansJpg.getWidth());
            Image dimg = kmeansJpg.getScaledInstance((int)Math.floor(kmeansJpg.getWidth()*scale), (int)Math.floor(kmeansJpg.getHeight()*scale), Image.SCALE_SMOOTH);
            ImageIcon imageIcon = new ImageIcon(dimg);
            outputImageLabel.setIcon(imageIcon);
            
        }
    }//GEN-LAST:event_confirmButtonActionPerformed

    private void saveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveItemActionPerformed
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION){ 
            File file = fileChooser.getSelectedFile();
            try {
                //sometimes encoding a png as a jpg will mess it up
                if(file.getAbsolutePath().endsWith(".png"))
                    ImageIO.write(postImage, "png", file);
                else
                    ImageIO.write(postImage, "jpg", file);
            } catch (IOException ex) {
                Logger.getLogger(ColorCompressorGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_saveItemActionPerformed

    private void kValueKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_kValueKeyTyped
        char enter = evt.getKeyChar();
        if(!(Character.isDigit(enter)) || kValue.getText().length() > 4){
            evt.consume();
        }
    }//GEN-LAST:event_kValueKeyTyped

    private void kValueKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_kValueKeyPressed
        if (evt.getKeyCode()==KeyEvent.VK_ENTER)
        {
            confirmButton.doClick();
        }
    }//GEN-LAST:event_kValueKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ColorCompressorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(ColorCompressorGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ColorCompressorGUI().setVisible(true);
            }
        });
    }

    class ImageFilter extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with a raster image extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".png") || file.getAbsolutePath().endsWith(".jpg") || file.getAbsolutePath().endsWith(".JPG") || file.getAbsolutePath().endsWith(".PNG") || file.getAbsolutePath().endsWith(".jpeg") || file.getAbsolutePath().endsWith(".JPEG");
        }
        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            return "Image documents(*.jpg or *.png)";
        }
    } 
    
    private static BufferedImage kmeans_helper(BufferedImage originalImage, int k)
    {
        int w = originalImage.getWidth();
        int h = originalImage.getHeight();
        BufferedImage kmeansImage = new BufferedImage(w,h,originalImage.getType());
        Graphics2D g = kmeansImage.createGraphics();
        g.drawImage(originalImage, 0, 0, w,h , null);
        // Read rgb values from the image
        int[] rgb=new int[w*h];
        int count=0;
        for(int i=0;i<w;i++)
        {
                for(int j=0;j<h;j++)
                {
                        rgb[count++]=kmeansImage.getRGB(i,j);
                }
        }
        // Call kmeans algorithm: update the rgb values
        kmeans(rgb,k);

        // Write the new rgb values to the image
        count=0;
        for(int i=0;i<w;i++)
        {
                for(int j=0;j<h;j++)
                {
                        kmeansImage.setRGB(i,j,rgb[count++]);
                }
        }
        return kmeansImage;
    }
    
     // Update the array rgb by assigning each entry in the rgb array to its cluster center
    private static void kmeans(int[] rgb, int k)
    {
        //assign k random clusters
        int[] kclusters = new int[k];
        int[] assignments = new int[rgb.length];
        Random rand = new Random();
        for(int i = 0; i < kclusters.length; i++)
                kclusters[i] = rgb[rand.nextInt(rgb.length)];

        //hard number of iterations
        int iterations = 30;

        //current pixel to be assigned to a cluster
        int currentPixel;
        for(int iter = 0; iter < iterations; iter++)
        {
            //find min distance of every pixel to each cluster and assign to a cluster
            for(int i = 0; i < rgb.length; i++)
            {
                //need to change the integer value into RGB to select each RGB value
                currentPixel = rgb[i];
                Color current = new Color(currentPixel);

                //find min distance to clusters
                double min = Integer.MAX_VALUE;
                int minIndex = 0;

                //go through all clusters to find which one is closest in terms of RGB values
                for (int j = 0; j < kclusters.length; j++)
                {
                    //find differences in R, G, and B
                    Color cluster = new Color(kclusters[j]);
                    int dBlue = current.getBlue() - cluster.getBlue();
                    int dGreen = current.getGreen() - cluster.getGreen();
                    int dRed = current.getRed() - cluster.getRed();
                    //find the closest in regards to all values. values are multiplied in case some are negative
                    if(Math.sqrt(dBlue*dBlue + dGreen*dGreen + dRed*dRed) < min)
                    {
                            min = Math.sqrt(dBlue*dBlue + dGreen*dGreen + dRed*dRed);
                            minIndex = j;
                    }
                }
                //save the cluster assignment
                assignments[i] = minIndex;
            }

            //find the cluster means
            for(int i = 0; i < k; i++)
            {
                //keep track of the sum of all values of r, g, and b along with the count of how many pixels are assigned to the ith cluster
                int redSum = 0;
                int greenSum = 0;
                int blueSum = 0;
                int count = 0;

                //go through all pixels and find out where they are assigned
                for(int j = 0; j < assignments.length; j++)
                {
                    if(i == assignments[j])
                    {
                        Color current = new Color(rgb[j]);
                        redSum += current.getRed();
                        greenSum += current.getGreen();
                        blueSum += current.getBlue();
                        count++;
                    }
                }
                //sometimes the count may be 0, if so set a new cluster
                if(count == 0)
                {
                    kclusters[i] = rgb[rand.nextInt(rgb.length)];
                }
                //find means
                else
                {
                    redSum /= count;
                    greenSum /= count;
                    blueSum /= count;
                    kclusters[i] = new Color(redSum, greenSum, blueSum).getRGB();
                }
            }
        }
        //set the palette to allow user to change it
        setPalette(kclusters);
        
        //write the final values back to the new image
        for(int i = 0; i < rgb.length; i++)
        {
                rgb[i] = kclusters[assignments[i]];
        }
    }
    
    private static void setPalette(int[] kclusters)
    {
        int k = kclusters.length;
        for(int i = 0; i < k; i++)
        {
            if(i == list.size())
                break;
             //need to change the RGB integer value into Color
            Color current = new Color(kclusters[i]);
            list.get(i).setBackground(current);
            MouseAdapterMod mam = new MouseAdapterMod();
            list.get(i).addMouseListener(mam);
        }
    }
    
    public static class MouseAdapterMod extends MouseAdapter 
    {
        // usually better off with mousePressed rather than clicked
        @Override
        public void mousePressed(MouseEvent e) {
            JPanel clickedPanel = (JPanel)e.getSource();
            System.out.println(clickedPanel +"");
            
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenuItem Open;
    private javax.swing.JButton confirmButton;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField kValue;
    private javax.swing.JLabel outputImageLabel;
    private javax.swing.JPanel palette1;
    private javax.swing.JPanel palette2;
    private javax.swing.JPanel palette3;
    private javax.swing.JPanel palette4;
    private javax.swing.JPanel paletteBackground;
    private javax.swing.JLabel paletteText;
    private javax.swing.JMenuItem saveItem;
    // End of variables declaration//GEN-END:variables
}
